load("C:\Users\Xu\Desktop\基于深度学习的超快压缩图片重构研究\仿真数据\数据1\E1.mat");
load("C:\Users\Xu\Desktop\基于深度学习的超快压缩图片重构研究\仿真数据\数据1\mask.mat");
load("C:\Users\Xu\Desktop\基于深度学习的超快压缩图片重构研究\仿真数据\数据1\I1.mat");

E_input = make_8(y,1);
mask = f;
output = zeros(128,128,8);

hR = @(x)  masked_FFT(x,mask); %x->y
hRT = @(x) masked_FFT_t(x,mask); %y->x

temp = hR(input)
% denoising function;
tv_iters = 10;
Psi = @(x,th)  tvdenoise(x,2/th,tv_iters);

% set the penalty function, to compute the objective
Phi = @(x) TVnorm(x);
% regularization parameters (empirical)
%tau = max(norm(y,'fro')/sqrt(4*k)/4,sqrt(3)*sigma);
tau = 0.01;

tolA = 1e-4;
% -- TwIST ---------------------------
% stop criterium:  the relative change in the objective function 
% falls below 'ToleranceA'   
true = input;

[x_twist,dummy,obj_twist,...
        times_twist,dummy,mse_twist]= ...
             TwIST(y,hR,tau,...
             'Lambda', 1e-3, ...
             'AT', hRT, ...
             'Psi', Psi, ...
             'Phi',Phi, ...
             'Monotone',1,...
             'MaxiterA', 10000, ...
             'Initialization',0,...
             'StopCriterion',1,...
             'ToleranceA',tolA,...
             'Verbose', 1);

output = x_twist;

%输出归一化
% ymax = max(max(max(output)));
% ymin = min(min(min(output)));
% if(ymax-ymin~=0)
%     output =(output-ymin)/(ymax-ymin);
% end
% ymax = max(max(max(output)));

% for i=1:8
%     y = E_input(:,:,i);
%     true = input(:,:,i);
%     [x_twist,dummy,obj_twist,...
%         times_twist,dummy,mse_twist]= ...
%              TwIST(y,hR,tau,...
%              'Lambda', 1e-3, ...
%              'AT', hRT, ...
%              'Psi', Psi, ...
%              'Phi',Phi, ...
%              'True_x', true, ...
%              'Monotone',1,...
%              'MaxiterA', 10000, ...
%              'Initialization',0,...
%              'StopCriterion',1,...
%              'ToleranceA',tolA,...
%              'Verbose', 1);
%    
%     if i==1
%         figure(17);
%         set(17,'Position',[800 0 300 300]);
%         semilogy(times_twist, (mse_twist*prod(size(f))).^0.5/norm(f,'fro'),'LineWidth',2);
%         title('error ||x^{t}-x||_2/||x||_2')
%         xlabel('CPU time (sec)')
%         grid on
%     end
%      
% end
% 
% psnr = PSNR(output(:,:,1),input(:,:,3));
% 
for i=1:8
    temp = output(:,:,i);
    figure(i);
    set(i,'Position',[10 400 300 300]);
    imagesc(temp);
    title("Epic_"+i);
    drawnow;
end
for k=1:8
    temp = input(:,:,k);
    figure(k+8);
    set(k,'Position',[10 400 300 300]);
    imagesc(temp);
    title("pic_"+k);
    drawnow;
end


s = 0;
for k=1:8
    temp = PSNR(output(:,:,k),input(:,:,k));
    s = s + temp;
end
avg = s/8;
   
% [x_twist,dummy,obj_twist,...
%     times_twist,dummy,mse_twist]= ...
%          SpaRSA(y,hR,tau,...
%          'AT', hRT, ...
%          'Psi', Psi, ...
%          'Phi',Phi, ...
%          'True_x', f, ...
%          'BB_factor', 0.8, ...
%          'Monotone',1,...
%          'Initialization',0,...
%          'StopCriterion',4,...
%        	 'ToleranceA',obj_twist(end),...
%          'Verbose', 1);

